import type { ComponentType } from 'react';
import React from 'react';
import type { AnyZodObject } from 'zod';
import type { InferProps, PropsIfHasProps } from './props-if-has-props.js';
type LooseComponentType<T> = ComponentType<T> | ((props: T) => React.ReactNode);
export type CompProps<Props> = {
    lazyComponent: () => Promise<{
        default: LooseComponentType<Props>;
    }>;
} | {
    component: LooseComponentType<Props>;
};
export type CalcMetadataReturnType<T> = {
    durationInFrames?: number;
    fps?: number;
    width?: number;
    height?: number;
    props?: T;
};
export type CalculateMetadataFunction<T> = (options: {
    defaultProps: T;
    props: T;
    abortSignal: AbortSignal;
}) => Promise<CalcMetadataReturnType<T>> | CalcMetadataReturnType<T>;
export type StillProps<Schema extends AnyZodObject, Props extends Record<string, unknown> | undefined> = {
    width: number;
    height: number;
    id: string;
    calculateMetadata?: CalculateMetadataFunction<InferProps<Schema, Props>>;
    schema?: Schema;
} & CompProps<Props> & PropsIfHasProps<Schema, Props>;
export type CompositionProps<Schema extends AnyZodObject, Props extends Record<string, unknown> | undefined> = StillProps<Schema, Props> & {
    fps: number;
    durationInFrames: number;
};
/**
 * @description This component is used to register a video to make it renderable and make it show in the sidebar, in dev mode.
 * @see [Documentation](https://www.remotion.dev/docs/composition)
 */
export declare const Composition: <Schema extends AnyZodObject, Props extends Record<string, unknown> | undefined>({ width, height, fps, durationInFrames, id, defaultProps, schema, ...compProps }: CompositionProps<Schema, Props>) => React.ReactPortal | null;
export {};
