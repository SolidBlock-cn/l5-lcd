/// <reference types="react" />
import type { CompProps } from './Composition.js';
import type { TAsset, TCompMetadata, TComposition, TSequence } from './CompositionManager.js';
import type { CompositionManagerContext } from './CompositionManagerContext.js';
import * as CSSUtils from './default-css.js';
import type { RemotionEnvironment } from './get-environment.js';
import { processColor } from './interpolate-colors.js';
import type { SetTimelineContextValue, TimelineContextValue } from './timeline-position-state.js';
import * as TimelinePosition from './timeline-position-state.js';
import { truthy } from './truthy.js';
import type { MediaVolumeContextValue, SetMediaVolumeContextValue } from './volume-position-state.js';
import { useRemotionContexts } from './wrap-remotion-context.js';
declare const Timeline: typeof TimelinePosition;
export declare const Internals: {
    useUnsafeVideoConfig: () => import("./video-config.js").VideoConfig | null;
    Timeline: typeof TimelinePosition;
    CompositionManager: import("react").Context<CompositionManagerContext>;
    SequenceManager: import("react").Context<import("./SequenceManager.js").SequenceManagerContext>;
    RemotionRoot: import("react").FC<{
        children: import("react").ReactNode;
        numberOfAudioTags: number;
    }>;
    useVideo: () => (import("./video-config.js").VideoConfig & {
        component: import("react").LazyExoticComponent<import("react").ComponentType<Record<string, unknown> | undefined>>;
    }) | null;
    getRoot: () => import("react").FC<{}> | null;
    useMediaVolumeState: () => readonly [number, (u: number) => void];
    useMediaMutedState: () => readonly [boolean, (u: import("react").SetStateAction<boolean>) => void];
    useLazyComponent: <Props>(compProps: CompProps<Props>) => import("react").ExoticComponent<(import("react").PropsWithoutRef<Props> & import("react").RefAttributes<import("react").Component<Props, any, any>>) | import("react").PropsWithRef<Props>> & {
        readonly _result: import("react").ComponentType<Props>;
    };
    truthy: typeof truthy;
    SequenceContext: import("react").Context<import("./SequenceContext.js").SequenceContextType | null>;
    useRemotionContexts: typeof useRemotionContexts;
    RemotionContextProvider: (props: import("./wrap-remotion-context.js").RemotionContextProviderProps) => JSX.Element;
    CSSUtils: typeof CSSUtils;
    setupEnvVariables: () => void;
    MediaVolumeContext: import("react").Context<MediaVolumeContextValue>;
    SetMediaVolumeContext: import("react").Context<SetMediaVolumeContextValue>;
    validateDurationInFrames: ({ allowFloats, component, durationInFrames, }: {
        durationInFrames: number;
        component: string;
        allowFloats: boolean;
    }) => void;
    validateFps: (fps: number, location: string, isGif: boolean) => void;
    validateDefaultAndInputProps: (defaultProps: unknown, name: "defaultProps" | "inputProps", compositionId: string | null) => void;
    validateDimension: (amount: number, nameOfProp: string, location: string) => void;
    getRemotionEnvironment: () => RemotionEnvironment;
    SharedAudioContext: import("react").Context<{
        registerAudio: (aud: import("./index.js").RemotionAudioProps, audioId: string) => {
            id: number;
            props: import("./index.js").RemotionAudioProps;
            el: import("react").RefObject<HTMLAudioElement>;
            audioId: string;
        };
        unregisterAudio: (id: number) => void;
        updateAudio: (options: {
            id: number;
            aud: import("./index.js").RemotionAudioProps;
            audioId: string;
        }) => void;
        playAllAudios: () => void;
        numberOfAudioTags: number;
    } | null>;
    SharedAudioContextProvider: import("react").FC<{
        numberOfAudioTags: number;
        children: import("react").ReactNode;
        component: import("react").LazyExoticComponent<import("react").ComponentType<Record<string, unknown> | undefined>> | null;
    }>;
    invalidCompositionErrorMessage: string;
    isCompositionIdValid: (id: string) => RegExpMatchArray | null;
    getPreviewDomElement: () => HTMLElement | null;
    compositionsRef: import("react").RefObject<{
        getCompositions: () => import("./CompositionManager.js").TCompMetadataWithCalcFunction<import("zod").AnyZodObject, Record<string, unknown> | undefined>[];
    }>;
    DELAY_RENDER_CALLSTACK_TOKEN: string;
    portalNode: () => HTMLElement;
    waitForRoot: (fn: (comp: import("react").FC<{}>) => void) => () => void;
    CanUseRemotionHooksProvider: import("react").FC<{
        children: import("react").ReactNode;
    }>;
    CanUseRemotionHooks: import("react").Context<boolean>;
    PrefetchProvider: import("react").FC<{
        children: import("react").ReactNode;
    }>;
    DurationsContextProvider: import("react").FC<{
        children: import("react").ReactNode;
    }>;
    IsPlayerContextProvider: import("react").FC<{
        children?: import("react").ReactNode;
    }>;
    useIsPlayer: () => boolean;
    useRemotionEnvironment: () => RemotionEnvironment;
    validateFrame: ({ allowFloats, durationInFrames, frame, }: {
        frame: number;
        durationInFrames: number;
        allowFloats: boolean;
    }) => void;
    EditorPropsProvider: import("react").FC<{
        children: import("react").ReactNode;
    }>;
    EditorPropsContext: import("react").Context<import("./EditorProps.js").EditorPropsContextType>;
    usePreload: (src: string) => string;
    processColor: typeof processColor;
    NonceContext: import("react").Context<import("./nonce.js").TNonceContext>;
    resolveVideoConfig: ({ composition, editorProps: editorPropsOrUndefined, signal, }: {
        composition: import("./CompositionManager.js").TCompMetadataWithCalcFunction<import("zod").AnyZodObject, Record<string, unknown> | undefined>;
        editorProps: object;
        signal: AbortSignal;
    }) => import("./video-config.js").VideoConfig | Promise<import("./video-config.js").VideoConfig>;
    useResolvedVideoConfig: (preferredCompositionId: string | null) => ({
        type: "loading";
    } | {
        type: "success";
        result: import("./video-config.js").VideoConfig;
    } | {
        type: "error";
        error: Error;
    }) | null;
    resolveCompositionsRef: import("react").RefObject<{
        setCurrentRenderModalComposition: (compositionId: string | null) => void;
        reloadCurrentlySelectedComposition: () => void;
    }>;
    ResolveCompositionConfig: import("react").FC<import("react").PropsWithChildren<{
        children: import("react").ReactNode;
    }>>;
    REMOTION_STUDIO_CONTAINER_ELEMENT: string;
    AssetManager: import("react").Context<import("./AssetManager.js").AssetManagerContext>;
    bundleName: string;
};
export type { TComposition, Timeline, TCompMetadata, TSequence, TAsset, TimelineContextValue, SetTimelineContextValue, CompProps, CompositionManagerContext, MediaVolumeContextValue, SetMediaVolumeContextValue, RemotionEnvironment, };
