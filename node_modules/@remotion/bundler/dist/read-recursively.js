"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readRecursively = void 0;
const node_fs_1 = __importStar(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const readRecursively = ({ folder, output = [], startPath, staticHash, limit, }) => {
    const absFolder = node_path_1.default.join(startPath, folder);
    if (!node_fs_1.default.existsSync(absFolder)) {
        return [];
    }
    const files = node_fs_1.default.readdirSync(absFolder);
    for (const file of files) {
        if (output.length >= limit) {
            break;
        }
        if (file.startsWith('.DS_Store')) {
            continue;
        }
        const stat = (0, node_fs_1.statSync)(node_path_1.default.join(absFolder, file));
        if (stat.isDirectory()) {
            (0, exports.readRecursively)({
                startPath,
                folder: node_path_1.default.join(folder, file),
                output,
                staticHash,
                limit,
            });
        }
        else if (stat.isFile()) {
            output.push({
                name: node_path_1.default.join(folder, file),
                lastModified: Math.floor(stat.mtimeMs),
                sizeInBytes: stat.size,
                src: staticHash + '/' + encodeURIComponent(node_path_1.default.join(folder, file)),
            });
        }
        else if (stat.isSymbolicLink()) {
            const realpath = node_fs_1.default.realpathSync(node_path_1.default.join(folder, file));
            const realStat = node_fs_1.default.statSync(realpath);
            if (realStat.isFile()) {
                output.push({
                    name: realpath,
                    lastModified: Math.floor(realStat.mtimeMs),
                    sizeInBytes: realStat.size,
                    src: staticHash + '/' + encodeURIComponent(realpath),
                });
            }
        }
    }
    return output.sort((a, b) => a.name.localeCompare(b.name));
};
exports.readRecursively = readRecursively;
