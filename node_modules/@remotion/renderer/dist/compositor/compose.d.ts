import type { DownloadMap } from '../assets/download-map';
import type { Compositor } from './compositor';
import type { CompositorCommand, CompositorCommandSerialized, CompositorImageFormat, Layer } from './payloads';
type CompositorInput = {
    height: number;
    width: number;
    layers: Layer[];
    imageFormat: CompositorImageFormat;
};
type ComposeInput = CompositorInput & {
    output: string;
    compositor: Compositor;
};
export declare const serializeCommand: <Type extends keyof CompositorCommand>(command: Type, params: CompositorCommand[Type]) => CompositorCommandSerialized<Type>;
export declare const composeWithoutCache: ({ height, width, layers, output, imageFormat, compositor, }: CompositorInput & {
    output: string;
    compositor: Compositor;
}) => Promise<void>;
export declare const compose: ({ height, width, layers, output, downloadMap, imageFormat, compositor, }: CompositorInput & {
    output: string;
    compositor: Compositor;
} & {
    downloadMap: DownloadMap;
}) => Promise<void>;
export declare const callCompositor: (payload: string) => Promise<void>;
export {};
