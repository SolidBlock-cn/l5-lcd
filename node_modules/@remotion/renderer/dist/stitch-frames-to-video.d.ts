/// <reference types="node" />
import type { RenderMediaOnDownload } from './assets/download-and-map-assets-to-file';
import type { RenderAssetInfo } from './assets/download-map';
import type { AudioCodec } from './audio-codec';
import type { Codec } from './codec';
import type { FfmpegOverrideFn } from './ffmpeg-override';
import type { CancelSignal } from './make-cancel-signal';
import type { PixelFormat } from './pixel-format';
import type { ProResProfile } from './prores-profile';
type InternalStitchFramesToVideoOptions = {
    audioBitrate: string | null;
    videoBitrate: string | null;
    fps: number;
    width: number;
    height: number;
    outputLocation: string | null;
    force: boolean;
    assetsInfo: RenderAssetInfo;
    pixelFormat: PixelFormat;
    numberOfGifLoops: number | null;
    codec: Codec;
    audioCodec: AudioCodec | null;
    crf: number | null;
    onProgress?: null | ((progress: number) => void);
    onDownload: undefined | RenderMediaOnDownload;
    proResProfile: undefined | ProResProfile;
    verbose: boolean;
    dir: string;
    cancelSignal: CancelSignal | null;
    preEncodedFileLocation: string | null;
    preferLossless: boolean;
    indent: boolean;
    muted: boolean;
    enforceAudioTrack: boolean;
    ffmpegOverride: null | FfmpegOverrideFn;
};
export type StitchFramesToVideoOptions = {
    audioBitrate?: string | null;
    videoBitrate?: string | null;
    fps: number;
    width: number;
    height: number;
    outputLocation?: string | null;
    force: boolean;
    assetsInfo: RenderAssetInfo;
    pixelFormat?: PixelFormat;
    numberOfGifLoops?: number | null;
    codec?: Codec;
    audioCodec?: AudioCodec | null;
    crf?: number | null;
    onProgress?: (progress: number) => void;
    onDownload?: RenderMediaOnDownload;
    proResProfile?: ProResProfile;
    verbose?: boolean;
    dir: string;
    cancelSignal?: CancelSignal;
    muted?: boolean;
    enforceAudioTrack?: boolean;
    ffmpegOverride?: FfmpegOverrideFn;
};
export declare const internalStitchFramesToVideo: (options: InternalStitchFramesToVideoOptions) => Promise<Buffer | null>;
/**
 * @description Takes a series of images and audio information generated by renderFrames() and encodes it to a video.
 * @see [Documentation](https://www.remotion.dev/docs/renderer/stitch-frames-to-video)
 */
export declare const stitchFramesToVideo: ({ assetsInfo, force, fps, height, width, audioBitrate, audioCodec, cancelSignal, codec, crf, dir, enforceAudioTrack, ffmpegOverride, muted, numberOfGifLoops, onDownload, onProgress, outputLocation, pixelFormat, proResProfile, verbose, videoBitrate, }: StitchFramesToVideoOptions) => Promise<Buffer | null>;
export {};
