"use strict";
/**
 * Copyright 2020 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadBrowser = void 0;
const BrowserFetcher_1 = require("./BrowserFetcher");
const revisions_1 = require("./revisions");
const supportedProducts = {
    chrome: 'Chromium',
    firefox: 'Firefox Nightly',
};
function getRevision(product) {
    if (product === 'chrome') {
        return revisions_1.PUPPETEER_REVISIONS.chromium;
    }
    throw new Error(`Unsupported product ${product}`);
}
async function downloadBrowser(product) {
    const revision = getRevision(product);
    const revisionInfo = (0, BrowserFetcher_1.getRevisionInfo)(revision, product);
    try {
        await (0, BrowserFetcher_1.download)({
            revision: revisionInfo.revision,
            progressCallback: (downloadedBytes, totalBytes) => {
                console.log('Downloading', supportedProducts[product], toMegabytes(downloadedBytes) + '/' + toMegabytes(totalBytes));
            },
            product,
            platform: (0, BrowserFetcher_1.getPlatform)(product),
            downloadHost: (0, BrowserFetcher_1.getDownloadHost)(product),
            downloadsFolder: (0, BrowserFetcher_1.getDownloadsFolder)(product),
        });
        const _localRevisions = await (0, BrowserFetcher_1.localRevisions)((0, BrowserFetcher_1.getDownloadsFolder)(product), product, (0, BrowserFetcher_1.getPlatform)(product));
        console.log(`${supportedProducts[product]} (${revisionInfo.revision}) downloaded to ${revisionInfo.folderPath}`);
        await Promise.all(_localRevisions
            .filter((__revision) => {
            return __revision !== revisionInfo.revision;
        })
            .map((__revision) => {
            return (0, BrowserFetcher_1.removeBrowser)(__revision, (0, BrowserFetcher_1.getFolderPath)(revision, (0, BrowserFetcher_1.getDownloadsFolder)(product), (0, BrowserFetcher_1.getPlatform)(product)));
        }));
    }
    catch (err) {
        throw new Error(`Failed to set up ${supportedProducts[product]} r${revision}! Set "PUPPETEER_SKIP_DOWNLOAD" env variable to skip download.`);
    }
}
exports.downloadBrowser = downloadBrowser;
function toMegabytes(bytes) {
    const mb = bytes / 1024 / 1024;
    return `${Math.round(mb * 10) / 10} Mb`;
}
