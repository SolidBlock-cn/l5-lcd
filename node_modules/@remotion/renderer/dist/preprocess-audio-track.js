"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preprocessAudioTrack = void 0;
const get_audio_channels_1 = require("./assets/get-audio-channels");
const calculate_ffmpeg_filters_1 = require("./calculate-ffmpeg-filters");
const call_ffmpeg_1 = require("./call-ffmpeg");
const ffmpeg_filter_file_1 = require("./ffmpeg-filter-file");
const p_limit_1 = require("./p-limit");
const resolve_asset_src_1 = require("./resolve-asset-src");
const sample_rate_1 = require("./sample-rate");
const preprocessAudioTrackUnlimited = async ({ outName, asset, expectedFrames, fps, downloadMap, }) => {
    const { channels, duration } = await (0, get_audio_channels_1.getAudioChannelsAndDuration)(downloadMap, (0, resolve_asset_src_1.resolveAssetSrc)(asset.src));
    const filter = (0, calculate_ffmpeg_filters_1.calculateFfmpegFilter)({
        asset,
        durationInFrames: expectedFrames,
        fps,
        channels,
        assetDuration: duration,
    });
    if (filter === null) {
        return null;
    }
    const { cleanup, file } = await (0, ffmpeg_filter_file_1.makeFfmpegFilterFile)(filter, downloadMap);
    const args = [
        ['-i', (0, resolve_asset_src_1.resolveAssetSrc)(asset.src)],
        ['-ac', '2'],
        ['-filter_script:a', file],
        ['-c:a', 'pcm_s16le'],
        ['-ar', String(sample_rate_1.DEFAULT_SAMPLE_RATE)],
        ['-y', outName],
    ].flat(2);
    await (0, call_ffmpeg_1.callFf)('ffmpeg', args);
    cleanup();
    return { outName, filter };
};
const limit = (0, p_limit_1.pLimit)(2);
const preprocessAudioTrack = (options) => {
    return limit(preprocessAudioTrackUnlimited, options);
};
exports.preprocessAudioTrack = preprocessAudioTrack;
