"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openEventSource = exports.subscribeToEvent = void 0;
const NotificationCenter_1 = require("./editor/components/Notifications/NotificationCenter");
const context_1 = require("./editor/components/RenderQueue/context");
const client_id_1 = require("./editor/helpers/client-id");
let source = null;
let listeners = [];
const subscribeToEvent = (type, listener) => {
    listeners.push({ type, listener });
    return () => {
        listeners = listeners.filter((l) => l.type !== type || l.listener !== listener);
    };
};
exports.subscribeToEvent = subscribeToEvent;
const openEventSource = () => {
    source = new EventSource('/events');
    source.addEventListener('message', (event) => {
        var _a, _b;
        const newEvent = JSON.parse(event.data);
        if (newEvent.type === 'new-input-props' ||
            newEvent.type === 'new-env-variables') {
            window.location.reload();
        }
        if (newEvent.type === 'init') {
            (_a = client_id_1.studioServerConnectionRef.current) === null || _a === void 0 ? void 0 : _a.set({
                type: 'connected',
                clientId: newEvent.clientId,
            });
        }
        if (newEvent.type === 'render-queue-updated') {
            (_b = context_1.renderJobsRef.current) === null || _b === void 0 ? void 0 : _b.updateRenderJobs(newEvent.queue);
        }
        if (newEvent.type === 'render-job-failed') {
            (0, NotificationCenter_1.sendErrorNotification)(`Rendering "${newEvent.compositionId}" failed`);
        }
        if (newEvent.type === 'new-public-folder') {
            window.remotion_staticFiles = newEvent.files;
        }
        listeners.forEach((l) => {
            if (l.type === newEvent.type) {
                l.listener(newEvent);
            }
        });
    });
    source.addEventListener('open', () => {
        source.addEventListener('error', () => {
            var _a;
            (_a = client_id_1.studioServerConnectionRef.current) === null || _a === void 0 ? void 0 : _a.set({ type: 'disconnected' });
            // Display an error message that the studio server has disconnected.
            source === null || source === void 0 ? void 0 : source.close();
            // Retry later
            setTimeout(() => {
                (0, exports.openEventSource)();
            }, 1000);
        }, { once: true });
    });
};
exports.openEventSource = openEventSource;
