import type { BrowserExecutable, ChromiumOptions, FrameRange } from '@remotion/renderer';
export declare const getAndValidateAbsoluteOutputFile: (relativeOutputLocation: string, overwrite: boolean) => string;
export declare const getCliOptions: (options: {
    isLambda: boolean;
    type: 'still' | 'series' | 'get-compositions';
    remotionRoot: string;
}) => Promise<{
    puppeteerTimeout: number;
    concurrency: string | number | null;
    frameRange: FrameRange | null;
    shouldOutputImageSequence: boolean;
    inputProps: Record<string, unknown>;
    envVariables: Record<string, string>;
    jpegQuality: number;
    browser: import("@remotion/renderer").Browser;
    crf: import("@remotion/renderer").Crf | null;
    pixelFormat: "yuv420p" | "yuva420p" | "yuv422p" | "yuv444p" | "yuv420p10le" | "yuv422p10le" | "yuv444p10le" | "yuva444p10le";
    proResProfile: "4444-xq" | "4444" | "hq" | "standard" | "light" | "proxy" | undefined;
    everyNthFrame: number;
    numberOfGifLoops: import("./config/number-of-gif-loops").Loop;
    stillFrame: number;
    browserExecutable: BrowserExecutable;
    logLevel: "verbose" | "info" | "warn" | "error";
    scale: number;
    chromiumOptions: ChromiumOptions;
    overwrite: boolean;
    port: number | null;
    muted: boolean;
    enforceAudioTrack: boolean;
    publicDir: string | null;
    ffmpegOverride: import("@remotion/renderer").FfmpegOverrideFn;
    audioBitrate: string | null;
    videoBitrate: string | null;
    height: number | null;
    width: number | null;
    configFileImageFormat: "none" | "png" | "jpeg" | undefined;
}>;
