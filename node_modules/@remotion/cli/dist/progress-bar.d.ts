import type { CancelSignal } from '@remotion/renderer';
import type { AggregateRenderProgress } from './progress-types';
export type OverwriteableCliOutput = {
    update: (up: string, newline: boolean) => boolean;
};
export declare const createOverwriteableCliOutput: (options: {
    quiet: boolean;
    cancelSignal: CancelSignal | null;
    updatesDontOverwrite: boolean;
    indent: boolean;
}) => OverwriteableCliOutput;
export type CopyingState = {
    bytes: number;
    doneIn: number | null;
};
export type BundlingState = {
    progress: number;
    doneIn: number | null;
};
export type SymbolicLinksState = {
    symlinks: string[];
};
export declare const makeBundlingAndCopyProgress: ({ bundling, copying, symLinks, }: {
    bundling: BundlingState;
    copying: CopyingState;
    symLinks: SymbolicLinksState;
}, bundlingStep: number, steps: number) => string;
export declare const makeRenderingAndStitchingProgress: ({ prog, steps, stitchingStep, }: {
    prog: AggregateRenderProgress;
    steps: number;
    stitchingStep: number;
}) => {
    output: string;
    progress: number;
    message: string;
};
