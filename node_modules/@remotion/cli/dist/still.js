"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.still = void 0;
const cleanup_before_quit_1 = require("./cleanup-before-quit");
const convert_entry_point_to_serve_url_1 = require("./convert-entry-point-to-serve-url");
const entry_point_1 = require("./entry-point");
const get_cli_options_1 = require("./get-cli-options");
const log_1 = require("./log");
const parse_command_line_1 = require("./parse-command-line");
const still_1 = require("./render-flows/still");
const still = async (remotionRoot, args) => {
    const { file, remainingArgs, reason: entryPointReason, } = (0, entry_point_1.findEntryPoint)(args, remotionRoot);
    if (!file) {
        log_1.Log.error('No entry point specified. Pass more arguments:');
        log_1.Log.error('   npx remotion render [entry-point] [composition-name] [out-name]');
        log_1.Log.error('Documentation: https://www.remotion.dev/docs/render');
        process.exit(1);
    }
    const fullEntryPoint = (0, convert_entry_point_to_serve_url_1.convertEntryPointToServeUrl)(file);
    if (parse_command_line_1.parsedCli.frames) {
        log_1.Log.error('--frames flag was passed to the `still` command. This flag only works with the `render` command. Did you mean `--frame`? See reference: https://www.remotion.dev/docs/cli/');
        process.exit(1);
    }
    const { browser, browserExecutable, chromiumOptions, envVariables, height, inputProps, overwrite, port, publicDir, puppeteerTimeout, jpegQuality, scale, stillFrame, width, logLevel, } = await (0, get_cli_options_1.getCliOptions)({
        isLambda: false,
        type: 'still',
        remotionRoot,
    });
    await (0, still_1.renderStillFlow)({
        remotionRoot,
        entryPointReason,
        fullEntryPoint,
        remainingArgs,
        browser,
        browserExecutable,
        chromiumOptions,
        envVariables,
        height,
        inputProps,
        overwrite,
        port,
        publicDir,
        puppeteerTimeout,
        jpegQuality,
        scale,
        stillFrame,
        width,
        compositionIdFromUi: null,
        imageFormatFromUi: null,
        logLevel,
        onProgress: () => undefined,
        indentOutput: false,
        addCleanupCallback: (c) => {
            (0, cleanup_before_quit_1.registerCleanupJob)(c);
        },
        cancelSignal: null,
        outputLocationFromUi: null,
    });
};
exports.still = still;
