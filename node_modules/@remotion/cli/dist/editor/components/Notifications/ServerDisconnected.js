"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerDisconnected = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const client_id_1 = require("../../helpers/client-id");
const container = {
    position: 'fixed',
    justifyContent: 'flex-end',
    alignItems: 'flex-start',
    display: 'flex',
    width: '100%',
    height: '100%',
    flexDirection: 'column',
    padding: 30,
    pointerEvents: 'none',
    backgroundColor: 'transparent',
    fontFamily: 'SF Pro, Arial, Helvetica, sans-serif',
};
const message = {
    backgroundColor: '#e74c3c',
    color: 'white',
    paddingLeft: 20,
    paddingRight: 20,
    paddingTop: 12,
    paddingBottom: 12,
    borderRadius: 4,
    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.4)',
    lineHeight: 1.5,
};
const inlineCode = {
    fontSize: 16,
    fontFamily: 'monospace',
};
let pageIsGoingToReload = false;
window.addEventListener('beforeunload', () => {
    pageIsGoingToReload = true;
});
const ServerDisconnected = () => {
    const ctx = (0, react_1.useContext)(client_id_1.StudioServerConnectionCtx);
    if (ctx.type !== 'disconnected') {
        return null;
    }
    if (pageIsGoingToReload) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)("div", { style: container, className: "css-reset", children: (0, jsx_runtime_1.jsxs)("div", { style: message, children: ["The studio server has disconnected. ", (0, jsx_runtime_1.jsx)("br", {}), window.remotion_studioServerCommand ? ((0, jsx_runtime_1.jsxs)("span", { children: ["Run", ' ', (0, jsx_runtime_1.jsx)("code", { style: inlineCode, children: window.remotion_studioServerCommand }), ' ', "to run it again."] })) : ((0, jsx_runtime_1.jsx)("span", { children: "Fast refresh will not work." }))] }) }));
};
exports.ServerDisconnected = ServerDisconnected;
