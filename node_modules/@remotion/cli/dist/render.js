"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
// eslint-disable-next-line no-restricted-imports
const cleanup_before_quit_1 = require("./cleanup-before-quit");
const config_1 = require("./config");
const convert_entry_point_to_serve_url_1 = require("./convert-entry-point-to-serve-url");
const entry_point_1 = require("./entry-point");
const get_audio_codec_1 = require("./get-audio-codec");
const get_cli_options_1 = require("./get-cli-options");
const log_1 = require("./log");
const parse_command_line_1 = require("./parse-command-line");
const render_1 = require("./render-flows/render");
const render = async (remotionRoot, args) => {
    const { file, remainingArgs, reason: entryPointReason, } = (0, entry_point_1.findEntryPoint)(args, remotionRoot);
    if (!file) {
        log_1.Log.error('No entry point specified. Pass more arguments:');
        log_1.Log.error('   npx remotion render [entry-point] [composition-name] [out-name]');
        log_1.Log.error('Documentation: https://www.remotion.dev/docs/render');
        process.exit(1);
    }
    const fullEntryPoint = (0, convert_entry_point_to_serve_url_1.convertEntryPointToServeUrl)(file);
    if (parse_command_line_1.parsedCli.frame) {
        log_1.Log.error('--frame flag was passed to the `render` command. This flag only works with the `still` command. Did you mean `--frames`? See reference: https://www.remotion.dev/docs/cli/');
        process.exit(1);
    }
    const { concurrency, frameRange, shouldOutputImageSequence, overwrite, inputProps, envVariables, jpegQuality, browser, browserExecutable, scale, chromiumOptions, port, everyNthFrame, puppeteerTimeout, publicDir, height, width, crf, ffmpegOverride, audioBitrate, muted, enforceAudioTrack, proResProfile, pixelFormat, videoBitrate, numberOfGifLoops, } = await (0, get_cli_options_1.getCliOptions)({
        isLambda: false,
        type: 'series',
        remotionRoot,
    });
    const audioCodec = (0, get_audio_codec_1.getResolvedAudioCodec)();
    await (0, render_1.renderVideoFlow)({
        fullEntryPoint,
        remotionRoot,
        browserExecutable,
        indent: false,
        logLevel: config_1.ConfigInternals.Logging.getLogLevel(),
        browser,
        chromiumOptions,
        scale,
        shouldOutputImageSequence,
        publicDir,
        envVariables,
        inputProps,
        puppeteerTimeout,
        port,
        height,
        width,
        remainingArgs,
        compositionIdFromUi: null,
        entryPointReason,
        overwrite,
        quiet: (0, parse_command_line_1.quietFlagProvided)(),
        concurrency,
        everyNthFrame,
        frameRange,
        jpegQuality,
        onProgress: () => undefined,
        addCleanupCallback: (c) => {
            (0, cleanup_before_quit_1.registerCleanupJob)(c);
        },
        outputLocationFromUI: null,
        uiCodec: null,
        uiImageFormat: null,
        cancelSignal: null,
        crf,
        ffmpegOverride,
        audioBitrate,
        muted,
        enforceAudioTrack,
        proResProfile,
        pixelFormat,
        videoBitrate,
        numberOfGifLoops,
        audioCodec,
        disallowParallelEncoding: false,
    });
};
exports.render = render;
