"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompositionId = void 0;
const renderer_1 = require("@remotion/renderer");
const log_1 = require("./log");
const show_compositions_picker_1 = require("./show-compositions-picker");
const getCompName = ({ cliArgs, compositionIdFromUi, }) => {
    if (compositionIdFromUi) {
        return {
            compName: compositionIdFromUi,
            remainingArgs: [],
            reason: 'via UI',
        };
    }
    const [compName, ...remainingArgs] = cliArgs;
    return { compName, remainingArgs, reason: 'Passed as argument' };
};
const getCompositionId = async ({ args, compositionIdFromUi, inputProps, puppeteerInstance, envVariables, timeoutInMilliseconds, chromiumOptions, port, browserExecutable, serveUrlOrWebpackUrl, verbose, indent, server, }) => {
    const { compName, remainingArgs, reason: compReason, } = getCompName({
        cliArgs: args,
        compositionIdFromUi,
    });
    if (compName) {
        const config = await renderer_1.RenderInternals.internalSelectComposition({
            id: compName,
            inputProps,
            puppeteerInstance,
            envVariables,
            timeoutInMilliseconds,
            serveUrl: serveUrlOrWebpackUrl,
            browserExecutable,
            chromiumOptions,
            port,
            verbose,
            server,
            indent,
            onBrowserLog: null,
        });
        if (!config) {
            throw new Error(`Cannot find composition with ID "${compName}"`);
        }
        return {
            compositionId: compName,
            reason: compReason,
            config,
            argsAfterComposition: remainingArgs,
        };
    }
    if (!process.env.CI) {
        const comps = await renderer_1.RenderInternals.internalGetCompositions({
            inputProps,
            puppeteerInstance,
            envVariables,
            timeoutInMilliseconds,
            chromiumOptions,
            port,
            browserExecutable,
            verbose,
            indent,
            server,
            serveUrlOrWebpackUrl,
            onBrowserLog: null,
        });
        const { compositionId, reason } = await (0, show_compositions_picker_1.showSingleCompositionsPicker)(comps);
        if (compositionId && typeof compositionId === 'string') {
            return {
                compositionId,
                reason,
                config: comps.find((c) => c.id === compositionId),
                argsAfterComposition: args,
            };
        }
    }
    log_1.Log.error('Composition ID not passed.');
    log_1.Log.error('Pass an extra argument <composition-id>.');
    process.exit(1);
};
exports.getCompositionId = getCompositionId;
