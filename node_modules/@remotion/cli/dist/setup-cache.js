"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundleOnCliOrTakeServeUrl = void 0;
const bundler_1 = require("@remotion/bundler");
const renderer_1 = require("@remotion/renderer");
const config_1 = require("./config");
const log_1 = require("./log");
const parse_command_line_1 = require("./parse-command-line");
const progress_bar_1 = require("./progress-bar");
const should_use_non_overlaying_logger_1 = require("./should-use-non-overlaying-logger");
const bundleOnCliOrTakeServeUrl = async ({ fullPath, remotionRoot, publicDir, onProgress, indentOutput, logLevel, bundlingStep, steps, onDirectoryCreated, quietProgress, }) => {
    if (renderer_1.RenderInternals.isServeUrl(fullPath)) {
        onProgress({
            bundling: {
                doneIn: 0,
                progress: 1,
            },
            copying: {
                bytes: 0,
                doneIn: 0,
            },
        });
        return {
            urlOrBundle: fullPath,
            cleanup: () => Promise.resolve(undefined),
        };
    }
    const bundled = await bundleOnCli({
        fullPath,
        remotionRoot,
        publicDir,
        onProgressCallback: onProgress,
        indent: indentOutput,
        logLevel,
        bundlingStep,
        steps,
        onDirectoryCreated,
        quietProgress,
    });
    return {
        urlOrBundle: bundled,
        cleanup: () => renderer_1.RenderInternals.deleteDirectory(bundled),
    };
};
exports.bundleOnCliOrTakeServeUrl = bundleOnCliOrTakeServeUrl;
const bundleOnCli = async ({ fullPath, remotionRoot, publicDir, onProgressCallback, indent, logLevel, bundlingStep, steps, onDirectoryCreated, quietProgress, }) => {
    var _a;
    const shouldCache = config_1.ConfigInternals.getWebpackCaching();
    const symlinkState = {
        symlinks: [],
    };
    const onProgress = (progress) => {
        bundlingState = {
            progress: progress / 100,
            doneIn: null,
        };
        updateProgress(false);
    };
    let copyingState = {
        bytes: 0,
        doneIn: null,
    };
    let copyStart = null;
    const updateProgress = (newline) => {
        bundlingProgress.update((0, progress_bar_1.makeBundlingAndCopyProgress)({
            bundling: bundlingState,
            copying: copyingState,
            symLinks: symlinkState,
        }, bundlingStep, steps), newline);
        onProgressCallback({
            bundling: bundlingState,
            copying: copyingState,
        });
    };
    const onPublicDirCopyProgress = (bytes) => {
        if (copyStart === null) {
            copyStart = Date.now();
        }
        copyingState = {
            bytes,
            doneIn: null,
        };
        updateProgress(false);
    };
    const onSymlinkDetected = (absPath) => {
        symlinkState.symlinks.push(absPath);
        updateProgress(false);
    };
    const options = {
        enableCaching: shouldCache,
        webpackOverride: (_a = config_1.ConfigInternals.getWebpackOverrideFn()) !== null && _a !== void 0 ? _a : ((f) => f),
        rootDir: remotionRoot,
        publicDir,
        onPublicDirCopyProgress,
        onSymlinkDetected,
    };
    const [hash] = bundler_1.BundlerInternals.getConfig({
        outDir: '',
        entryPoint: fullPath,
        onProgress,
        options,
        resolvedRemotionRoot: remotionRoot,
    });
    const cacheExistedBefore = bundler_1.BundlerInternals.cacheExists(remotionRoot, 'production', hash);
    if (cacheExistedBefore !== 'does-not-exist' && !shouldCache) {
        log_1.Log.infoAdvanced({ indent, logLevel }, 'üßπ Cache disabled but found. Deleting... ');
        await bundler_1.BundlerInternals.clearCache(remotionRoot, 'production');
    }
    if (cacheExistedBefore === 'other-exists' && shouldCache) {
        log_1.Log.infoAdvanced({ indent, logLevel }, 'üßπ Webpack config change detected. Clearing cache... ');
        await bundler_1.BundlerInternals.clearCache(remotionRoot, 'production');
    }
    const bundleStartTime = Date.now();
    const bundlingProgress = (0, progress_bar_1.createOverwriteableCliOutput)({
        quiet: quietProgress || (0, parse_command_line_1.quietFlagProvided)(),
        cancelSignal: null,
        updatesDontOverwrite: (0, should_use_non_overlaying_logger_1.shouldUseNonOverlayingLogger)({ logLevel }),
        indent,
    });
    let bundlingState = {
        progress: 0,
        doneIn: null,
    };
    const bundled = await (0, bundler_1.bundle)({
        entryPoint: fullPath,
        onProgress: (progress) => {
            bundlingState = {
                progress: progress / 100,
                doneIn: null,
            };
            updateProgress(false);
        },
        onDirectoryCreated,
        ...options,
    });
    bundlingState = {
        progress: 1,
        doneIn: Date.now() - bundleStartTime,
    };
    copyingState = {
        ...copyingState,
        doneIn: copyStart ? Date.now() - copyStart : null,
    };
    updateProgress(true);
    log_1.Log.verboseAdvanced({ indent, logLevel }, 'Bundled under', bundled);
    const cacheExistedAfter = bundler_1.BundlerInternals.cacheExists(remotionRoot, 'production', hash) === 'exists';
    if (cacheExistedAfter) {
        if (cacheExistedBefore === 'does-not-exist' ||
            cacheExistedBefore === 'other-exists') {
            log_1.Log.infoAdvanced({ indent, logLevel }, '‚ö°Ô∏è Cached bundle. Subsequent renders will be faster.');
        }
    }
    return bundled;
};
