declare type SeekPayload = {
    frame: number;
};
declare type ErrorPayload = {
    error: Error;
};
declare type TimeUpdateEventPayload = {
    frame: number;
};
declare type FrameUpdateEventPayload = {
    frame: number;
};
declare type RateChangeEventPayload = {
    playbackRate: number;
};
declare type ScaleChangeEventPayload = {
    scale: number;
};
declare type VolumeChangeEventPayload = {
    volume: number;
};
declare type FullscreenChangeEventPayload = {
    isFullscreen: boolean;
};
declare type MuteChangeEventPayload = {
    isMuted: boolean;
};
declare type PlayerStateEventMap = {
    seeked: SeekPayload;
    pause: undefined;
    play: undefined;
    ratechange: RateChangeEventPayload;
    scalechange: ScaleChangeEventPayload;
    volumechange: VolumeChangeEventPayload;
    ended: undefined;
    error: ErrorPayload;
    timeupdate: TimeUpdateEventPayload;
    frameupdate: FrameUpdateEventPayload;
    fullscreenchange: FullscreenChangeEventPayload;
    mutechange: MuteChangeEventPayload;
};
declare type ThumbnailStateEventMap = {
    error: ErrorPayload;
};
export declare type PlayerEventTypes = keyof PlayerStateEventMap;
export declare type ThumbnailEventTypes = keyof ThumbnailStateEventMap;
export declare type CallbackListener<T extends PlayerEventTypes> = (data: {
    detail: PlayerStateEventMap[T];
}) => void;
declare type PlayerListeners = {
    [EventType in PlayerEventTypes]: CallbackListener<EventType>[];
};
declare type ThumbnailListeners = {
    [EventType in ThumbnailEventTypes]: CallbackListener<EventType>[];
};
export declare class PlayerEmitter {
    listeners: PlayerListeners;
    addEventListener<Q extends PlayerEventTypes>(name: Q, callback: CallbackListener<Q>): void;
    removeEventListener<Q extends PlayerEventTypes>(name: Q, callback: CallbackListener<Q>): void;
    private dispatchEvent;
    dispatchSeek(frame: number): void;
    dispatchVolumeChange(volume: number): void;
    dispatchPause(): void;
    dispatchPlay(): void;
    dispatchEnded(): void;
    dispatchRateChange(playbackRate: number): void;
    dispatchScaleChange(scale: number): void;
    dispatchError(error: Error): void;
    dispatchTimeUpdate(event: TimeUpdateEventPayload): void;
    dispatchFrameUpdate(event: FrameUpdateEventPayload): void;
    dispatchFullscreenChange(event: FullscreenChangeEventPayload): void;
    dispatchMuteChange(event: MuteChangeEventPayload): void;
}
export declare class ThumbnailEmitter {
    listeners: ThumbnailListeners;
    addEventListener<Q extends ThumbnailEventTypes>(name: Q, callback: CallbackListener<Q>): void;
    removeEventListener<Q extends ThumbnailEventTypes>(name: Q, callback: CallbackListener<Q>): void;
    private dispatchEvent;
    dispatchError(error: Error): void;
}
export {};
